// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  username       String       @unique
  firstName      String       @map("first_name")
  lastName       String       @map("last_name")
  password       String
  salt           String
  isVerified     Boolean     @default(false)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  projects       Project[]
  assignedIssues Issue[]      @relation("AssignedIssues")
  teams          UserTeam[]
  profile        UserProfile?

  @@map("users")
}

model UserProfile {
  id           String   @id @default(cuid())
  avatar       String?
  phone        String?
  gender       Gender?
  socialId     String?  @unique @map("social_id")
  token        String?  @unique
  tokenVersion Int      @default(0) @map("token_version")
  userId       String   @unique @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  social       Social?  @relation(fields: [socialId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@map("userprofile")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  key         String
  description String?
  creatorId   String        @map("creator_id")
  status      ProjectStatus @default(TODO)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  teams       ProjectTeam[]
  creator     User          @relation(fields: [creatorId], references: [id])
  sprints     Sprint[]
  issues      Issue[]       @relation("ProjectIssues")

  @@map("projects")
}

model Team {
  id        String        @id @default(cuid())
  name      String
  creatorId String        @map("creator_id")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  projects  ProjectTeam[]
  users     UserTeam[]

  @@map("teams")
}

model UserTeam {
  id       String     @id @default(cuid())
  userId   String
  teamId   String
  role     MemberRole @default(Viewer)
  joinedAt DateTime?  @default(now())
  team     Team       @relation(fields: [teamId], references: [id])
  user     User       @relation(fields: [userId], references: [id])

  @@map("user_teams")
}

model ProjectTeam {
  id        String   @id @default(cuid())
  projectId String
  teamId    String
  joinedAt  DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@map("project_teams")
}

model Issue {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      IssueStatus @default(TODO)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  dueDate     DateTime    @map("due_date")
  type        IssueType   @default(TASK)
  assigneeId  String?
  creatorId   String      @map("creator_id")
  projectId   String      @map("project_id")
  sprintId    String?     @map("sprint_id")

  depth Int @default(0) @map("depth")

  assignee User?   @relation("AssignedIssues", fields: [assigneeId], references: [id])
  project  Project @relation("ProjectIssues", fields: [projectId], references: [id])
  sprint   Sprint? @relation(fields: [sprintId], references: [id])

  parentId  String? @map("parent_id")
  parent    Issue?  @relation("IssueHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  childrens Issue[] @relation("IssueHierarchy")

  @@map("issues")
}

model Sprint {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      SprintStatus @default(TODO)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  dueDate     DateTime?    @map("due_date")
  creatorId   String       @map("creator_id")
  projectId   String       @map("project_id")
  project     Project      @relation(fields: [projectId], references: [id])
  issues      Issue[]

  @@map("sprints")
}

model Social {
  id          String       @id @default(cuid())
  github      String?      @unique
  facebook    String?      @unique
  twitter     String?      @unique
  linkedin    String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userProfile UserProfile?
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum SprintStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum ProjectStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Gender {
  Male
  Female
  Other
}

enum MemberRole {
  Admin
  Contributor
  Viewer
}

enum IssueType {
  EPIC
  STORY
  TASK
  BUG
}
