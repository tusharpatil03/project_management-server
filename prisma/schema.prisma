// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  salt      String
  role      Role     @default(User)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  projects       Project[]
  createdTeams   Team[]
  userTeams      UserTeam[]
  createdTasks   Task[]       @relation("CreatedTasks")
  assignedTasks  Task[]       @relation("AssignedTasks")
  createdSprints Sprint[]     
  profile        UserProfile?

  @@map("users")
}

model UserProfile {
  id        String   @id @default(cuid())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  avatar    String?
  phone     String?
  gender    Gender?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  social   Social? @relation(fields: [socialId], references: [id])
  socialId String? @unique @map("social_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("userprofile")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  creatorId   String        @map("creator_id")
  goal        String?
  plan        String?
  creator     User          @relation(fields: [creatorId], references: [id])
  status      ProjectStatus @default(Active)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  projectTeams ProjectTeam[]
  tasks        Task[]        @relation("ProjectTasks")
  sprints      Sprint[]

  @@map("projects")
}

model Team {
  id        String     @id @default(cuid())
  name      String?
  creatorId String     @map("creator_id")
  userTeams UserTeam[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  creator   User       @relation(fields: [creatorId], references: [id])

  projectTeams ProjectTeam[]

  @@map("teams")
}

model UserTeam {
  id       String     @id @default(cuid())
  userId   String
  teamId   String
  role     MemberRole @default(Viewer)
  joinedAt DateTime?  @default(now())

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])
}

model ProjectTeam {
  id        String   @id @default(cuid())
  projectId String
  teamId    String
  project   Project  @relation(fields: [projectId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  joinedAt  DateTime @default(now())
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  dueDate     DateTime   @map("due_date")

  assigneeId String?
  assignee   User?   @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creatorId  String  @map("creator_id")
  creator    User    @relation("CreatedTasks", fields: [creatorId], references: [id])
  projectId  String  @map("project_id")
  project    Project @relation("ProjectTasks", fields: [projectId], references: [id])
  sprintId   String? @map("sprint_id")
  sprint     Sprint? @relation(fields: [sprintId], references: [id])

  @@map("tasks")
}

model Sprint {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      SprintStatus @default(Planned)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  dueDate     DateTime?    @map("due_date")

  creatorId String  @map("creator_id")
  creator   User    @relation(fields: [creatorId], references: [id])
  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id])
  tasks     Task[]  

  @@map("sprints")
}

model Social {
  id        String   @id @default(cuid())
  github    String?  @unique
  facebook  String?  @unique
  twitter   String?  @unique
  linkedin  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfile UserProfile? @relation
}

enum Role {
  Admin
  User
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum SprintStatus {
  Planned
  Active
  Completed
  Cancelled
}

enum ProjectStatus {
  Active
  OnHold
  Completed
  Cancelled
}

enum Gender {
  Male
  Female
  Other
}

enum MemberRole {
  Admin
  Contributor
  Viewer
}
