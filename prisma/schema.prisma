// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  username      String       @unique
  password      String
  salt          String
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  projects      Project[]
  assignedTasks Task[]       @relation("AssignedTasks")
  teams         UserTeam[]
  profile       UserProfile?

  @@map("users")
}

model UserProfile {
  id           String   @id @default(cuid())
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  avatar       String?
  phone        String?
  gender       Gender?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  socialId     String?  @unique @map("social_id")
  token        String?  @unique
  tokenVersion Int      @default(0) @map("token_version")
  userId       String   @unique @map("user_id")
  social       Social?  @relation(fields: [socialId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@map("userprofile")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  key         String        @unique
  description String?
  creatorId   String        @map("creator_id")
  status      ProjectStatus @default(TODO)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  teams       ProjectTeam[]
  creator     User          @relation(fields: [creatorId], references: [id])
  sprints     Sprint[]
  tasks       Task[]        @relation("ProjectTasks")

  @@map("projects")
}

model Team {
  id        String        @id @default(cuid())
  name      String?
  creatorId String        @map("creator_id")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  projects  ProjectTeam[]
  users     UserTeam[]

  @@map("teams")
}

model UserTeam {
  id       String     @id @default(cuid())
  userId   String
  teamId   String
  role     MemberRole @default(Viewer)
  joinedAt DateTime?  @default(now())
  team     Team       @relation(fields: [teamId], references: [id])
  user     User       @relation(fields: [userId], references: [id])

  @@map("user_teams")
}

model ProjectTeam {
  id        String   @id @default(cuid())
  projectId String
  teamId    String
  joinedAt  DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@map("project_teams")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  dueDate     DateTime   @map("due_date")
  assigneeId  String?
  creatorId   String     @map("creator_id")
  projectId   String     @map("project_id")
  sprintId    String?    @map("sprint_id")
  assignee    User?      @relation("AssignedTasks", fields: [assigneeId], references: [id])
  project     Project    @relation("ProjectTasks", fields: [projectId], references: [id])
  sprint      Sprint?    @relation(fields: [sprintId], references: [id])

  @@map("tasks")
}

model Sprint {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      SprintStatus @default(TODO)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  dueDate     DateTime?    @map("due_date")
  creatorId   String       @map("creator_id")
  projectId   String       @map("project_id")
  project     Project      @relation(fields: [projectId], references: [id])
  tasks       Task[]

  @@map("sprints")
}

model Social {
  id          String       @id @default(cuid())
  github      String?      @unique
  facebook    String?      @unique
  twitter     String?      @unique
  linkedin    String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userProfile UserProfile?
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum SprintStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum ProjectStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum Gender {
  Male
  Female
  Other
}

enum MemberRole {
  Admin
  Contributor
  Viewer
}
