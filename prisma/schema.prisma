// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  password   String
  salt       String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  projects       Project[]
  teams          UserTeam[]
  profile        UserProfile?
  createdIssue   Issue[]      @relation("CreatedIssues")
  assignedIssues Issue[]      @relation("AssignedIssues")
  comments       Comment[]
  activities     Activity[]

  @@map("users")
}

model UserProfile {
  id           String   @id @default(cuid())
  avatar       String?
  phone        String?
  bio          String?
  gender       Gender?
  socialId     String?  @unique @map("social_id")
  token        String?  @unique
  tokenVersion Int      @default(0) @map("token_version")
  userId       String   @unique @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  social Social? @relation(fields: [socialId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userprofile")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  key         String
  description String?
  starred     Boolean       @default(false)
  creatorId   String        @map("creator_id")
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  teams       ProjectTeam[]
  creator     User          @relation(fields: [creatorId], references: [id])
  sprints     Sprint[]
  issues      Issue[]       @relation("ProjectIssues")
  activities  Activity[]

  @@unique([creatorId, key])
  @@map("projects")
}

model Team {
  id         String        @id @default(cuid())
  name       String
  creatorId  String        @map("creator_id")
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  projects   ProjectTeam[]
  users      UserTeam[]
  activities Activity[]

  @@map("teams")
}

model UserTeam {
  id       String     @id @default(cuid())
  userId   String
  teamId   String
  role     MemberRole @default(Viewer)
  joinedAt DateTime?  @default(now())
  team     Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id])

  @@map("user_teams")
}

model ProjectTeam {
  id        String   @id @default(cuid())
  projectId String
  teamId    String
  joinedAt  DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("project_teams")
}

model Issue {
  id          String        @id @default(cuid())
  key         String
  title       String
  description String?
  status      IssueStatus   @default(TODO)
  priority    IssuePriority @default(MEDIUM)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  dueDate     DateTime      @map("due_date")
  type        IssueType     @default(TASK)
  assigneeId  String?
  creatorId   String        @map("creator_id")
  projectId   String        @map("project_id")
  sprintId    String?       @map("sprint_id")

  depth Int @default(0) @map("depth")

  creator  User    @relation("CreatedIssues", fields: [creatorId], references: [id])
  assignee User?   @relation("AssignedIssues", fields: [assigneeId], references: [id])
  project  Project @relation("ProjectIssues", fields: [projectId], references: [id], onDelete: Cascade)
  sprint   Sprint? @relation(fields: [sprintId], references: [id], onDelete: SetNull)

  parentId   String?    @map("parent_id")
  parent     Issue?     @relation("IssueHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  childrens  Issue[]    @relation("IssueHierarchy")
  comments   Comment[]
  activities Activity[]

  @@unique([projectId, key]) // This ensures that the 'key' is unique only within the scope of a 'projectId'.
  @@index([projectId])
  @@map("issues")
}

model Sprint {
  id          String       @id @default(cuid())
  key         String
  startDate   DateTime?    @map("start_date")
  dueDate     DateTime?    @map("due_date")
  title       String
  description String?
  status      SprintStatus @default(ACTIVE)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  creatorId   String       @map("creator_id")
  projectId   String       @map("project_id")
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  issues      Issue[]
  activities  Activity[]

  @@unique([projectId, key])
  @@map("sprints")
}

model Social {
  id          String       @id @default(cuid())
  github      String?      @unique
  facebook    String?      @unique
  twitter     String?      @unique
  linkedin    String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userProfile UserProfile?
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  issueId   String   @map("issue_id")
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  issue  Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author User  @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model Activity {
  id          String         @id @default(cuid())
  action      ActivityAction
  entityType  EntityType     @map("entity_type")
  entityId    String?        @map("entity_id")
  entityName  String?        @map("entity_name")
  description String?        @map("description")

  userId    String  @map("user_id")
  projectId String? @map("project_id")
  sprintId  String? @map("sprint_id")
  issueId   String? @map("issue_id")
  teamId    String? @map("team_id")

  createdAt DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sprint  Sprint?  @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  issue   Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  team    Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("activities")
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETE
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETE
}

enum Gender {
  Male
  Female
  Other
}

enum MemberRole {
  Admin
  Contributor
  Viewer
}

enum IssueType {
  EPIC
  STORY
  TASK
  BUG
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityAction {
  // Work/Time tracking activities
  LOGGED_TIME

  // Sprint management
  SPRINT_CREATED
  SPRINT_STARTED
  SPRINT_COMPLETED
  SPRINT_UPDATED
  SPRINT_REMOVED
  ISSUE_ADDED_TO_SPRINT
  ISSUE_REMOVED_FROM_SPRINT

  // Issue management
  ISSUE_CREATED
  ISSUE_UPDATED
  ISSUE_DELETED
  ISSUE_ASSIGNED
  ISSUE_UNASSIGNED
  ISSUE_STATUS_CHANGED
  ISSUE_PRIORITY_CHANGED

  // Project management
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  PROJECT_TEAM_ADDED
  PROJECT_TEAM_REMOVED

  // Team management
  TEAM_CREATED
  TEAM_UPDATED
  TEAM_MEMBER_ADDED
  TEAM_MEMBER_REMOVED
  TEAM_MEMBER_ROLE_CHANGED

  // Collaboration
  COMMENTED
  COMMENT_DELETED
}

enum EntityType {
  PROJECT
  TEAM
  SPRINT
  ISSUE
  COMMENT
  USER
}
